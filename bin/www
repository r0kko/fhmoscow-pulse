#!/usr/bin/env node

/**
 * Module dependencies.
 */
import http from 'http';
import https from 'https';
import fs from 'fs';

import debugLib from 'debug';

import app from '../app.js';
import { connectToDatabase } from '../src/config/database.js';
import { connectLegacyDatabase } from '../src/config/legacyDatabase.js';
import { connectRedis } from '../src/config/redis.js';
import validateEnv from '../src/config/validateEnv.js';
import startTaxationCron from '../src/jobs/taxationCron.js';

const debug = debugLib('fhmoscow-pulse:server');

validateEnv();

process.on('unhandledRejection', (err) => {
  console.error('Unhandled rejection:', err);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught exception:', err);
});

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP or HTTPS server.
 */
let server;
if (process.env.SSL_CERT_PATH && process.env.SSL_KEY_PATH) {
  try {
    const options = {
      cert: fs.readFileSync(process.env.SSL_CERT_PATH),
      key: fs.readFileSync(process.env.SSL_KEY_PATH),
    };
    server = https.createServer(options, app);
  } catch (err) {
    console.warn(
      `Could not load SSL certificates, falling back to HTTP: ${err.message}`
    );
    server = http.createServer(app);
  }
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

// Wait for a successful DB connection before accepting traffic
(async () => {
  await connectToDatabase();
  await connectRedis();
  await connectLegacyDatabase(); // continue even if legacy DB is unreachable
  startTaxationCron();
  server.listen(port);
})();

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
