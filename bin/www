#!/usr/bin/env node

/**
 * Production bootstrap with early tracing init
 */
import fs from 'fs';
import debugLib from 'debug';

// Initialize tracing as early as possible (optional)
await (await import('../src/telemetry/tracing.js')).initTracing();

// Lazy-load other modules after tracing to maximize coverage
const http = await import('http');
const https = await import('https');
const { default: app } = await import('../app.js');
const { connectToDatabase, closeDatabase } = await import('../src/config/database.js');
const { connectLegacyDatabase } = await import('../src/config/legacyDatabase.js');
const { connectExternalMariaDb, isExternalDbAvailable } = await import('../src/config/externalMariaDb.js');
const { setupExternalAssociations } = await import('../src/externalModels/index.js');
const { connectRedis, closeRedis } = await import('../src/config/redis.js');
const { default: validateEnv } = await import('../src/config/validateEnv.js');
const { default: startTaxationCron } = await import('../src/jobs/taxationCron.js');
const { default: startSyncAllCron, runSyncAll } = await import('../src/jobs/syncAllCron.js');
const { default: startBroadcastLinkSyncCron } = await import('../src/jobs/broadcastLinkSyncCron.js');
const { default: startGamePenaltySyncCron } = await import('../src/jobs/gamePenaltySyncCron.js');
const { default: startGameEventDeletionSyncCron } = await import('../src/jobs/gameEventDeletionSyncCron.js');
const { default: startMatchAgreementReminderCron } = await import('../src/jobs/matchAgreementReminderCron.js');
const { default: startExternalDbWatchCron } = await import('../src/jobs/externalDbWatchCron.js');
const { setReady, setSyncing } = await import('../src/config/readiness.js');
const { seedJobMetrics } = await import('../src/config/metrics.js');

const debug = debugLib('fhmoscow-pulse:server');

try {
  validateEnv();
} catch (err) {
  console.error(err?.message || err);
  process.exitCode = 1;
  throw err;
}

// Set build info metric once at startup
(async () => {
  try {
    const pkg = JSON.parse(await fs.promises.readFile(new URL('../package.json', import.meta.url)));
    const version = process.env.VERSION || pkg.version || '0.0.0';
    const commit = process.env.GIT_COMMIT || process.env.SOURCE_COMMIT || 'unknown';
    const { setBuildInfo } = await import('../src/config/metrics.js');
    setBuildInfo?.({ service: 'api', version, env: process.env.NODE_ENV || 'development', commit });
  } catch {}
})();

process.on('unhandledRejection', (err) => {
  console.error('Unhandled rejection:', err);
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught exception:', err);
});

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP or HTTPS server.
 */
let server;
if (process.env.SSL_CERT_PATH && process.env.SSL_KEY_PATH) {
  try {
    const options = {
      cert: fs.readFileSync(process.env.SSL_CERT_PATH),
      key: fs.readFileSync(process.env.SSL_KEY_PATH),
    };
    server = https.createServer(options, app);
  } catch (err) {
    console.warn(
      `Could not load SSL certificates, falling back to HTTP: ${err.message}`
    );
    server = http.createServer(app);
  }
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

// Wait for a successful DB connection, then start listening immediately; run initial sync in background
(async () => {
  await connectToDatabase();
  await connectRedis();
  await connectLegacyDatabase(); // continue even if legacy DB is unreachable
  await connectExternalMariaDb(); // optional external MariaDB

  // Start server and periodic jobs ASAP; protect jobs with distributed locks
  server.listen(port);
  startTaxationCron();
  startMatchAgreementReminderCron();
  // Watch for external DB availability transitions and trigger sync immediately
  startExternalDbWatchCron();

  // Start orchestrator cron regardless of external DB availability â€”
  // the job itself checks availability and uses a distributed lock.
  startSyncAllCron();
  // Dedicated broadcast link reconciler to track frequent link updates
  startBroadcastLinkSyncCron();
  // Dedicated penalties reconciler (keeps infractions fresh on its own schedule)
  startGamePenaltySyncCron();
  // Deletions-only reconciler for events: keep local penalties clean across full history
  startGameEventDeletionSyncCron();

  // Seed metrics series for known jobs so gauges appear at startup
  try {
    await seedJobMetrics([
      'syncAll',
      'clubSync',
      'groundSync',
      'teamSync',
      'staffSync',
      'playerSync',
      'tournamentSync',
      'gameEventTypeSync',
      'penaltyMinutesSync',
      'gameSituationSync',
      'gameViolationSync',
      'gamePenaltySync',
      'broadcastLinkSync',
      'gameEventDeletionSync',
      'matchAgreementReminders',
      'taxation',
    ]);
  } catch {}

  // Prepare external associations if possible (non-fatal if unavailable now)
  if (isExternalDbAvailable()) {
    await setupExternalAssociations();
  }

  // Kick initial full sync with retry/backoff so container restarts don't miss it
  setReady(true); // API becomes ready as soon as core services are up
  (async () => {
    const delay = (ms) => new Promise((r) => setTimeout(r, ms));
    // Fixed policy: attempt for ~10 minutes with exponential backoff
    const maxAttempts = 12;
    let attempt = 0;
    let backoff = 5_000; // 5s, doubles to a reasonable cap
    while (attempt < maxAttempts) {
      attempt += 1;
      try {
        // Attempt reconnect and association prep best-effort; runSyncAll records metrics even if it skips
        try { await connectExternalMariaDb(); } catch {}
        if (isExternalDbAvailable()) { try { await setupExternalAssociations(); } catch {} }
        setSyncing(true);
        await runSyncAll();
        console.log('Initial sync completed on attempt', attempt);
        break;
      } catch (err) {
        console.warn(
          `Initial sync attempt #${attempt} failed: ${err?.message || err}. Retrying in ${Math.round(
            backoff / 1000
          )}s`
        );
        await delay(backoff);
        backoff = Math.min(backoff * 2, 120_000); // cap at 2 minutes
      } finally {
        setSyncing(false);
      }
    }
  })();
})().catch((err) => {
  console.error('Server bootstrap failed:', err?.message || err);
  process.exitCode = 1;
});

server.on('error', onError);
server.on('listening', onListening);

// Graceful shutdown on SIGTERM/SIGINT
async function shutdown(signal) {
  try {
    setReady(false);
  } catch {}
  console.log(`Received ${signal}, shutting down gracefully...`);
  try {
    await new Promise((resolve) => server.close(resolve));
  } catch {}
  try {
    await closeDatabase();
  } catch {}
  try {
    await closeRedis();
  } catch {}
  process.exitCode = 0;
}
process.on('SIGTERM', () => shutdown('SIGTERM'));
process.on('SIGINT', () => shutdown('SIGINT'));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exitCode = 1;
      return;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exitCode = 1;
      return;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
